{"version":3,"sources":["ICON.js","Temperature.js","WeatherOfTheDay.js","Footer.js","LoaderSpinner.js","App.js","serviceWorker.js","index.js"],"names":["ICON_TABLE","clear-day","clear-night","rain","snow","sleet","wind","fog","cloudy","partly-cloudy-day","partly-cloudy-night","ICON","props","iconClass","icon","react_default","a","createElement","className","Temperature","degree","toFixed","WeatherOfTheDay","temperatureMax","temperatureMin","timestamp","day","Date","ReactFitText_default","compressor","getMonth","getDate","src_ICON","src_Temperature","Link","href","children","concat","Footer","LoaderSpinner","loaded","react_loader_spinner_default","type","color","height","width","proxyurl","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weatherData","address","error","errorStr","_this2","getPosition","then","position","latitude","coords","longitude","Promise","all","getWeatherData","getAddress","allResult","setState","objectSpread","data","city","district","catch","message","console","options","resolve","reject","navigator","geolocation","getCurrentPosition","url","fetchForJSON","fetch","response","status","json","Error","statusText","myJson","_this$state","weatherOfTheDays","currentlyInfo","daily","map","d","src_WeatherOfTheDay","key","time","apparentTemperatureMax","apparentTemperatureMin","currently","getHours","getMinutes","summary","src_LoaderSpinner","src_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dae0f83e.chunk.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport \"./ICON.css\"\r\n\r\nconst ICON_TABLE = {\r\n  \"clear-day\": \"icon-sun\",\r\n  \"clear-night\": \"icon-moon\",\r\n  rain: \"icon-rainy\",\r\n  snow: \"icon-snowy\",\r\n  sleet: \"icon-weather\",\r\n  wind: \"icon-wind\",\r\n  fog: \"icon-weather1\",\r\n  cloudy: \"icon-cloudy1\",\r\n  \"partly-cloudy-day\": \"icon-cloudy\",\r\n  \"partly-cloudy-night\": \"icon-cloud\"\r\n}\r\n\r\nfunction ICON(props) {\r\n  const iconClass = ICON_TABLE[props.icon] || \"\"\r\n  return <div className={iconClass} />\r\n}\r\n\r\nICON.propTypes = {\r\n  icon: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ICON\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport \"tachyons/css/tachyons.min.css\"\r\n\r\nfunction Temperature(props) {\r\n  return <div className={props.className}>{props.degree.toFixed(0)}°</div>\r\n}\r\n\r\nTemperature.propTypes = {\r\n  degree: PropTypes.number.isRequired,\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default Temperature\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport ReactFitText from \"react-fittext\"\r\nimport \"tachyons/css/tachyons.min.css\"\r\nimport ICON from \"./ICON\"\r\nimport Temperature from \"./Temperature\"\r\n\r\nfunction WeatherOfTheDay(props) {\r\n  const { temperatureMax, temperatureMin, icon, timestamp } = props\r\n  let day = new Date(timestamp * 1000)\r\n  return (\r\n    <div\r\n      className=\"flex-minimum-content-sizing\r\n                 flex flex-column-l flex-row-m flex-row \r\n                 justify-around items-center\r\n                 ba b--light-silver bw1 w-20-l\"\r\n    >\r\n      <ReactFitText compressor={0.5}>\r\n        <div className=\"ma2 w-100\">\r\n          {day.getMonth() + 1}/{day.getDate()}\r\n        </div>\r\n      </ReactFitText>\r\n\r\n      <ReactFitText compressor={0.3}>\r\n        <div className=\"ma1 w-100\">\r\n          <ICON icon={icon} />\r\n        </div>\r\n      </ReactFitText>\r\n\r\n      <ReactFitText compressor={0.5}>\r\n        <div className=\"flex justify-center w-100\">\r\n          <Temperature className=\"ma2\" degree={temperatureMax} />\r\n          <Temperature className=\"ma2\" degree={temperatureMin} />\r\n        </div>\r\n      </ReactFitText>\r\n    </div>\r\n  )\r\n}\r\n\r\nWeatherOfTheDay.propTypes = {\r\n  temperatureMax: PropTypes.number.isRequired,\r\n  temperatureMin: PropTypes.number.isRequired,\r\n  icon: PropTypes.string.isRequired,\r\n  timestamp: PropTypes.number.isRequired\r\n}\r\nexport default WeatherOfTheDay\r\n","import React from \"react\"\r\nimport \"tachyons/css/tachyons.min.css\"\r\n\r\nfunction Link(props) {\r\n  const { className, href, children } = props\r\n  return (\r\n    <a className={`ma2-ns db f6-ns f7 link dim black ${className}`} href={href}>\r\n      {children}\r\n    </a>\r\n  )\r\n}\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"w-100\">\r\n      <Link className=\"fr-ns\" href=\"https://darksky.net/dev\">\r\n        Powered by Dark Sky\r\n      </Link>\r\n\r\n      <Link\r\n        className=\"fl-ns\"\r\n        href=\"https://www.pexels.com/photo/landscape-photo-of-mountain-669963/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels\"\r\n      >\r\n        Photo by Tsang Chung Yee from Pexels\r\n      </Link>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Loader from \"react-loader-spinner\"\r\n\r\nfunction LoaderSpinner(props) {\r\n  const { loaded, children } = props\r\n\r\n  if (loaded) return children\r\n  else return <Loader type=\"Puff\" color=\"#00BFFF\" height=\"100\" width=\"100\" />\r\n}\r\n\r\nLoaderSpinner.propTypes = {\r\n  loaded: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default LoaderSpinner\r\n","import React, { Component } from \"react\"\r\nimport ReactFitText from \"react-fittext\"\r\nimport \"tachyons/css/tachyons.min.css\"\r\nimport WeatherOfTheDay from \"./WeatherOfTheDay\"\r\nimport Footer from \"./Footer\"\r\nimport LoaderSpinner from \"./LoaderSpinner\"\r\nimport \"./App.css\"\r\n\r\n/* https://darksky.net/dev/docs/faq#cross-origin\r\n * 這裡說 API key 不要放在 clients\r\n * 但我沒填信用卡資料，所以被盜用也沒損失 :) */\r\nconst DARK_SKY_API_URL =\r\n  \"https://api.darksky.net/forecast/4cb365a801ca5928923efc0e201b8497/\"\r\n\r\nconst LANGUAGE = \"zh-tw\"\r\nconst proxyurl = \"https://v86861062-cors-anywhere.herokuapp.com/\"\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      weatherData: null,\r\n      loaded: false,\r\n      address: null,\r\n      error: false,\r\n      errorStr: \"\"\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.getPosition()\r\n      .then(position => {\r\n        const latitude = position.coords.latitude\r\n        const longitude = position.coords.longitude\r\n\r\n        return Promise.all([\r\n          position,\r\n          this.getWeatherData(latitude, longitude),\r\n          this.getAddress(latitude, longitude)\r\n        ])\r\n      })\r\n      .then(allResult => {\r\n        const weatherData = allResult[1]\r\n        const address = allResult[2]\r\n        this.setState({\r\n          weatherData: { ...weatherData },\r\n          address: `${address.data.city}${address.data.district}`,\r\n          loaded: true\r\n        })\r\n      })\r\n      .catch(error => {\r\n        this.setState({ error: true, errorStr: error.message })\r\n        console.error(error)\r\n      })\r\n  }\r\n\r\n  getPosition(options) {\r\n    return new Promise(function(resolve, reject) {\r\n      navigator.geolocation.getCurrentPosition(resolve, reject, options)\r\n    })\r\n  }\r\n\r\n  getWeatherData(latitude, longitude) {\r\n    const url = `${DARK_SKY_API_URL}${latitude},${longitude}?lang=${LANGUAGE}&units=auto`\r\n    return this.fetchForJSON(proxyurl + url)\r\n  }\r\n\r\n  getAddress(latitude, longitude) {\r\n    const url = `https://api.opencube.tw/location?lat=${latitude}&lng=${longitude}`\r\n    return this.fetchForJSON(proxyurl + url)\r\n  }\r\n\r\n  fetchForJSON(url) {\r\n    return fetch(url)\r\n      .then(function(response) {\r\n        if (response.status >= 200 && response.status < 300) {\r\n          return response.json()\r\n        } else {\r\n          var error = new Error(\r\n            `${url} ${response.statusText || response.status}`\r\n          )\r\n          error.response = response\r\n          return Promise.reject(error)\r\n        }\r\n      })\r\n      .then(function(myJson) {\r\n        return myJson\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { loaded, weatherData, address, error, errorStr } = this.state\r\n\r\n    if (error) {\r\n      return <p>{errorStr}</p>\r\n    }\r\n\r\n    let weatherOfTheDays = null\r\n    let currentlyInfo = null\r\n    if (loaded) {\r\n      weatherOfTheDays = weatherData.daily.data.map(d => (\r\n        <WeatherOfTheDay\r\n          key={d.time}\r\n          temperatureMax={d.apparentTemperatureMax}\r\n          temperatureMin={d.apparentTemperatureMin}\r\n          icon={d.icon}\r\n          timestamp={d.time}\r\n        />\r\n      ))\r\n\r\n      const time = new Date(weatherData.currently.time * 1000)\r\n      currentlyInfo = `${address}\\n${time.getMonth() +\r\n        1}/${time.getDate()}   ${time.getHours()}:${time.getMinutes()}\\n${\r\n        weatherData.currently.summary\r\n      }`\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className=\"app flex flex-column justify-between items-center fixed\r\n                   tc purple h-100 w-100 background-image sans-serif\"\r\n      >\r\n        <LoaderSpinner loaded={loaded}>\r\n          <ReactFitText>\r\n            <div\r\n              className=\"ma3-ns ma2 w-50\r\n                         pre overflow-hidden flex-minimum-content-sizing\"\r\n            >\r\n              {currentlyInfo}\r\n            </div>\r\n          </ReactFitText>\r\n        </LoaderSpinner>\r\n\r\n        <LoaderSpinner loaded={loaded}>\r\n          <ReactFitText>\r\n            <div\r\n              className=\"flex-none-l flex-auto \r\n                       ba b--gold bw1 overflow-auto carousel-wrap w-100\r\n                       flex flex-row-l flex-column-m flex-column justify-between\"\r\n            >\r\n              {weatherOfTheDays}\r\n            </div>\r\n          </ReactFitText>\r\n        </LoaderSpinner>\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}