{"version":3,"sources":["ICON.js","Temperature.js","WeatherOfTheDay.js","Footer.js","LoaderSpinner.js","MyButton.js","SimpleMap.js","App.js","serviceWorker.js","index.js"],"names":["ICON_TABLE","clear-day","clear-night","rain","snow","sleet","wind","fog","cloudy","partly-cloudy-day","partly-cloudy-night","ICON","props","iconClass","icon","react_default","a","createElement","className","Temperature","degree","toFixed","WeatherOfTheDay","temperatureMax","temperatureMin","timestamp","day","Date","ReactFitText_default","compressor","getMonth","getDate","src_ICON","src_Temperature","Link","href","children","concat","Footer","LoaderSpinner","_ref","loaded","react_loader_spinner_default","type","color","height","width","MyButton","_ref$className","onClick","SimpleMap","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_apiIsLoaded","map","maps","_handleMapClick","obj","latLng","lat","lng","setState","markLatLng","panTo","_handleButtonClick","event","stopPropagation","state","onClickCloseBtn","mapTypeControl","streetViewControl","fullscreenControl","styles","stylers","saturation","gamma","_this2","_this$state$markLatLn","style","lib_default","bootstrapURLKeys","key","defaultCenter","center","defaultZoom","zoom","options","createMapOptions","onGoogleApiLoaded","yesIWantToUseGoogleMapApiInternals","SimpleMap_MarkWithButton","text","Component","defaultProps","objectSpread","MarkWithButton","_ref2","greatPlaceStyle","src_MyButton","position","left","top","border","borderRadius","backgroundColor","textAlign","fontSize","fontWeight","padding","proxies","App","_getThenUpdateWeatherAndAddress","Promise","all","_getWeatherData","_getAddress","then","allResult","weatherData","address","data","city","district","catch","error","errorStr","message","console","_handleEnterLatLng","enableMap","_handleOpenMap","_getPosition","coords","latitude","longitude","resolve","reject","navigator","geolocation","getCurrentPosition","url","_useProxiesToFetch","_ref3","_this3","promises","v","_fetchForJSON","promiseAny","Error","fetch","response","status","json","statusText","myJson","_this$state","src_SimpleMap","weatherOfTheDays","currentlyInfo","daily","d","src_WeatherOfTheDay","time","apparentTemperatureMax","apparentTemperatureMin","currently","getHours","getMinutes","summary","src_LoaderSpinner","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c33d37fd.chunk.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport \"./ICON.css\"\r\n\r\nconst ICON_TABLE = {\r\n  \"clear-day\": \"icon-sun\",\r\n  \"clear-night\": \"icon-moon\",\r\n  rain: \"icon-rainy\",\r\n  snow: \"icon-snowy\",\r\n  sleet: \"icon-weather\",\r\n  wind: \"icon-wind\",\r\n  fog: \"icon-weather1\",\r\n  cloudy: \"icon-cloudy1\",\r\n  \"partly-cloudy-day\": \"icon-cloudy\",\r\n  \"partly-cloudy-night\": \"icon-cloud\"\r\n}\r\n\r\nfunction ICON(props) {\r\n  const iconClass = ICON_TABLE[props.icon] || \"\"\r\n  return <div className={iconClass} />\r\n}\r\n\r\nICON.propTypes = {\r\n  icon: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ICON\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nfunction Temperature(props) {\r\n  return <div className={props.className}>{props.degree.toFixed(0)}°</div>\r\n}\r\n\r\nTemperature.propTypes = {\r\n  degree: PropTypes.number.isRequired,\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default Temperature\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport ReactFitText from \"react-fittext\"\r\nimport ICON from \"./ICON\"\r\nimport Temperature from \"./Temperature\"\r\n\r\nfunction WeatherOfTheDay(props) {\r\n  const { temperatureMax, temperatureMin, icon, timestamp } = props\r\n  let day = new Date(timestamp * 1000)\r\n  return (\r\n    <div\r\n      className=\"flex-minimum-content-sizing\r\n                 flex flex-column-l flex-row-m flex-row \r\n                 justify-around items-center\r\n                 ba b--light-silver bw1 w-20-l\"\r\n    >\r\n      <ReactFitText compressor={0.5}>\r\n        <div className=\"ma2 w-100\">\r\n          {day.getMonth() + 1}/{day.getDate()}\r\n        </div>\r\n      </ReactFitText>\r\n\r\n      <ReactFitText compressor={0.3}>\r\n        <div className=\"ma1 w-100\">\r\n          <ICON icon={icon} />\r\n        </div>\r\n      </ReactFitText>\r\n\r\n      <ReactFitText compressor={0.5}>\r\n        <div className=\"flex justify-center w-100\">\r\n          <Temperature className=\"ma2\" degree={temperatureMax} />\r\n          <Temperature className=\"ma2\" degree={temperatureMin} />\r\n        </div>\r\n      </ReactFitText>\r\n    </div>\r\n  )\r\n}\r\n\r\nWeatherOfTheDay.propTypes = {\r\n  temperatureMax: PropTypes.number.isRequired,\r\n  temperatureMin: PropTypes.number.isRequired,\r\n  icon: PropTypes.string.isRequired,\r\n  timestamp: PropTypes.number.isRequired\r\n}\r\nexport default WeatherOfTheDay\r\n","import React from \"react\"\r\n\r\nfunction Link(props) {\r\n  const { className, href, children } = props\r\n  return (\r\n    <a className={`ma2-ns db f6-ns f7 link dim black ${className}`} href={href}>\r\n      {children}\r\n    </a>\r\n  )\r\n}\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"w-100\">\r\n      <Link className=\"fr-ns\" href=\"https://darksky.net/dev\">\r\n        Powered by Dark Sky\r\n      </Link>\r\n\r\n      <Link\r\n        className=\"fl-ns\"\r\n        href=\"https://www.pexels.com/photo/landscape-photo-of-mountain-669963/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels\"\r\n      >\r\n        Photo by Tsang Chung Yee from Pexels\r\n      </Link>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Loader from \"react-loader-spinner\"\r\n\r\nfunction LoaderSpinner({ loaded, children, className }) {\r\n  if (loaded) return children\r\n  else\r\n    return (\r\n      <div className={className}>\r\n        <Loader type=\"Puff\" color=\"#00BFFF\" height=\"100%\" width=\"100%\" />\r\n      </div>\r\n    )\r\n}\r\n\r\nLoaderSpinner.propTypes = {\r\n  loaded: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default LoaderSpinner\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nfunction MyButton({ className = \"\", children, onClick }) {\r\n  return (\r\n    <button\r\n      className={`nowrap pointer grow bg-green br4 ${className}`}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </button>\r\n  )\r\n}\r\n\r\nMyButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default MyButton\r\n","import React, { Component } from \"react\"\r\nimport GoogleMapReact from \"google-map-react\"\r\n\r\nimport MyButton from \"./MyButton\"\r\n\r\nconst Taichung = { lat: 24.14, lng: 120.64 }\r\nconst GOOGLE_API_KEY = \"AIzaSyALfGSxBrhj-gquT6UVYVJJGr0JXBgyFQU\" // cspell:disable-line\r\n\r\nclass SimpleMap extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { markLatLng: { lat: null, lng: null } }\r\n    this.map = null\r\n  }\r\n\r\n  static defaultProps = {\r\n    center: {\r\n      ...Taichung\r\n    },\r\n    zoom: 8\r\n  }\r\n\r\n  createMapOptions(maps) {\r\n    return {\r\n      mapTypeControl: false,\r\n      streetViewControl: false,\r\n      fullscreenControl: false,\r\n      styles: [{ stylers: [{ saturation: -100 }, { gamma: 0.8 }] }]\r\n    }\r\n  }\r\n\r\n  _apiIsLoaded = (map, maps) => {\r\n    if (!map) return\r\n\r\n    this.map = map\r\n  }\r\n\r\n  _placeMarkerAndPanTo(latLng, map) {\r\n    map.panTo(latLng)\r\n  }\r\n\r\n  _handleMapClick = obj => {\r\n    const latLng = { lat: obj.lat, lng: obj.lng }\r\n    const map = this.map\r\n\r\n    this.setState({ markLatLng: latLng })\r\n    if (map) map.panTo(latLng)\r\n  }\r\n\r\n  _handleButtonClick = event => {\r\n    event.stopPropagation() //這是為了避免 _onMapClick 執行\r\n\r\n    const latLng = this.state.markLatLng\r\n    const { onClickCloseBtn } = this.props\r\n    onClickCloseBtn(latLng)\r\n  }\r\n\r\n  render() {\r\n    const { lat, lng } = this.state.markLatLng\r\n\r\n    return (\r\n      // Important! Always set the container height explicitly\r\n      <div style={{ height: \"100%\", width: \"100%\" }}>\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: GOOGLE_API_KEY }}\r\n          defaultCenter={this.props.center}\r\n          defaultZoom={this.props.zoom}\r\n          options={this.createMapOptions}\r\n          onClick={this._handleMapClick}\r\n          onGoogleApiLoaded={({ map, maps }) => this._apiIsLoaded(map, maps)}\r\n          yesIWantToUseGoogleMapApiInternals\r\n        >\r\n          <MarkWithButton\r\n            lat={lat}\r\n            lng={lng}\r\n            text=\"我選好了\"\r\n            onClick={this._handleButtonClick}\r\n          />\r\n        </GoogleMapReact>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst MarkWithButton = ({ text, onClick }) => (\r\n  <div className=\"flex flex-column items-center\">\r\n    <div style={greatPlaceStyle} />\r\n    <MyButton className=\"ma3 f3 f4-ns\"  onClick={onClick} >{text}</MyButton>\r\n  </div>\r\n)\r\n\r\nconst K_WIDTH = 20\r\nconst K_HEIGHT = 20\r\nconst greatPlaceStyle = {\r\n  // initially any map object has left top corner at lat lng coordinates\r\n  // it's on you to set object origin to 0,0 coordinates\r\n  position: \"absolute\",\r\n  width: K_WIDTH,\r\n  height: K_HEIGHT,\r\n  left: -K_WIDTH / 2,\r\n  top: -K_HEIGHT / 2,\r\n\r\n  border: \"5px solid #f44336\",\r\n  borderRadius: K_HEIGHT,\r\n  backgroundColor: \"white\",\r\n  textAlign: \"center\",\r\n  color: \"#3f51b5\",\r\n  fontSize: 16,\r\n  fontWeight: \"bold\",\r\n  padding: 4\r\n}\r\n\r\nexport default SimpleMap\r\n","import React, { Component } from \"react\"\r\nimport ReactFitText from \"react-fittext\"\r\nimport promiseAny from \"promise-any\"\r\nimport WeatherOfTheDay from \"./WeatherOfTheDay\"\r\nimport Footer from \"./Footer\"\r\nimport LoaderSpinner from \"./LoaderSpinner\"\r\nimport SimpleMap from \"./SimpleMap\"\r\nimport MyButton from \"./MyButton\"\r\nimport \"./App.css\"\r\n\r\n/* https://darksky.net/dev/docs/faq#cross-origin\r\n * 這裡說 API key 不要放在 clients\r\n * 但我沒填信用卡資料，所以被盜用也沒損失 :) */\r\nconst DARK_SKY_API_URL =\r\n  \"https://api.darksky.net/forecast/4cb365a801ca5928923efc0e201b8497/\"\r\n\r\nconst LANGUAGE = \"zh-tw\"\r\nconst proxies = [\r\n  \"https://v86861062-cors-anywhere.herokuapp.com/\",\r\n  \"https://cors-anywhere.herokuapp.com/\"\r\n]\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      weatherData: null,\r\n      loaded: false,\r\n      address: null,\r\n      error: false,\r\n      errorStr: \"\",\r\n      enableMap: false\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this._getPosition()\r\n      .then(position => {\r\n        return {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        }\r\n      })\r\n      .then(latLng => {\r\n        this._getThenUpdateWeatherAndAddress(latLng)\r\n      })\r\n  }\r\n\r\n  _getThenUpdateWeatherAndAddress = latLng => {\r\n    return Promise.all([this._getWeatherData(latLng), this._getAddress(latLng)])\r\n      .then(allResult => {\r\n        return { weatherData: allResult[0], address: allResult[1] }\r\n      })\r\n      .then(({ weatherData, address }) => {\r\n        this.setState({\r\n          weatherData: { ...weatherData },\r\n          address: `${address.data.city || \"\"}${address.data.district || \"\"}`,\r\n          loaded: true\r\n        })\r\n      })\r\n      .catch(error => {\r\n        this.setState({ error: true, errorStr: error.message })\r\n        console.error(error)\r\n      })\r\n  }\r\n\r\n  _getPosition(options) {\r\n    return new Promise(function(resolve, reject) {\r\n      navigator.geolocation.getCurrentPosition(resolve, reject, options)\r\n    })\r\n  }\r\n\r\n  _getWeatherData({ lat, lng }) {\r\n    const url = `${DARK_SKY_API_URL}${lat},${lng}?lang=${LANGUAGE}&units=auto`\r\n    return this._useProxiesToFetch(url)\r\n  }\r\n\r\n  _getAddress({ lat, lng }) {\r\n    const url = `https://api.opencube.tw/location?lat=${lat}&lng=${lng}`\r\n    return this._useProxiesToFetch(url)\r\n  }\r\n\r\n  _useProxiesToFetch(url) {\r\n    const promises = proxies.map(v => this._fetchForJSON(v + url))\r\n    return promiseAny(promises).catch(() => {\r\n      throw new Error(\"Maybe all proxies are dead :(\")\r\n    })\r\n  }\r\n\r\n  _fetchForJSON(url) {\r\n    return fetch(url)\r\n      .then(function(response) {\r\n        if (response.status >= 200 && response.status < 300) {\r\n          return response.json()\r\n        } else {\r\n          var error = new Error(\r\n            `${url} ${response.statusText || response.status}`\r\n          )\r\n          error.response = response\r\n          return Promise.reject(error)\r\n        }\r\n      })\r\n      .then(function(myJson) {\r\n        return myJson\r\n      })\r\n  }\r\n\r\n  _handleEnterLatLng = latLng => {\r\n    this.setState({ enableMap: false, loaded: false })\r\n    this._getThenUpdateWeatherAndAddress(latLng)\r\n  }\r\n\r\n  _handleOpenMap = () => {\r\n    this.setState({ enableMap: true })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      loaded,\r\n      weatherData,\r\n      address,\r\n      error,\r\n      errorStr,\r\n      enableMap\r\n    } = this.state\r\n\r\n    if (error) {\r\n      return <p>{errorStr}</p>\r\n    }\r\n\r\n    if (enableMap) {\r\n      return <SimpleMap onClickCloseBtn={this._handleEnterLatLng} />\r\n    }\r\n\r\n    let weatherOfTheDays = null\r\n    let currentlyInfo = null\r\n    if (loaded) {\r\n      weatherOfTheDays = weatherData.daily.data.map(d => (\r\n        <WeatherOfTheDay\r\n          key={d.time}\r\n          temperatureMax={d.apparentTemperatureMax}\r\n          temperatureMin={d.apparentTemperatureMin}\r\n          icon={d.icon}\r\n          timestamp={d.time}\r\n        />\r\n      ))\r\n\r\n      const time = new Date(weatherData.currently.time * 1000)\r\n      currentlyInfo = `${address}\\n${time.getMonth() +\r\n        1}/${time.getDate()}   ${time.getHours()}:${time.getMinutes()}\\n${\r\n        weatherData.currently.summary\r\n      }`\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className=\"flex flex-column justify-between items-center fixed\r\n                   tc purple h-100 w-100 background-image\"\r\n      >\r\n        <LoaderSpinner className=\"w-50\" loaded={loaded}>\r\n          <MyButton\r\n            className=\"w-30-ns w-auto fixed right-1 top-1\"\r\n            onClick={this._handleOpenMap}\r\n          >\r\n            <ReactFitText>\r\n              <div>{\"我要選地點\"}</div>\r\n            </ReactFitText>\r\n          </MyButton>\r\n\r\n          <ReactFitText>\r\n            <div\r\n              className=\"ma3-ns ma2 w-50\r\n                            pre overflow-hidden flex-minimum-content-sizing\"\r\n            >\r\n              {currentlyInfo}\r\n            </div>\r\n          </ReactFitText>\r\n          <ReactFitText>\r\n            <div\r\n              className=\"flex-none-l flex-auto \r\n                          ba b--gold bw1 overflow-auto carousel-wrap w-100\r\n                          flex flex-row-l flex-column-m flex-column justify-between\"\r\n            >\r\n              {weatherOfTheDays}\r\n            </div>\r\n          </ReactFitText>\r\n        </LoaderSpinner>\r\n\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}